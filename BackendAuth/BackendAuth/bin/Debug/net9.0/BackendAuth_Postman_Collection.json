{
  "info": {
    "name": "BackendAuth API - Collection Compl√®te",
    "description": "Collection Postman pour tester toutes les fonctionnalit√©s de l'API BackendAuth avec JWT",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "backendauth-api-collection"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5232",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "admin_username",
      "value": "admin",
      "type": "string"
    },
    {
      "key": "admin_password",
      "value": "Admin123*",
      "type": "string"
    },
    {
      "key": "created_user_id",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-set Authorization header",
          "if (pm.collectionVariables.get('jwt_token')) {",
          "    pm.request.headers.add({",
          "        key: 'Authorization',",
          "        value: 'Bearer ' + pm.collectionVariables.get('jwt_token')",
          "    });",
          "}"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "üîß 1. Test API de Base",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/auth/test",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "test"]
        },
        "description": "Test pour v√©rifier que l'API fonctionne correctement"
      },
      "response": []
    },
    {
      "name": "üîê 2. Login Admin (Obtenir Token)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Sauvegarder automatiquement le token JWT",
              "if (pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    pm.collectionVariables.set('jwt_token', response.token);",
              "    pm.test('Token JWT sauvegard√©', function () {",
              "        pm.expect(response.token).to.exist;",
              "    });",
              "    console.log('üîë Token JWT sauvegard√© automatiquement');",
              "} else {",
              "    pm.test('Erreur de connexion', function () {",
              "        pm.response.to.have.status(200);",
              "    });",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"username\": \"{{admin_username}}\",\n  \"password\": \"{{admin_password}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/login",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "login"]
        },
        "description": "Connexion avec l'utilisateur admin. Le token JWT sera automatiquement sauvegard√©."
      },
      "response": []
    },
    {
      "name": "‚úÖ 3. Valider Token JWT",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "\"{{jwt_token}}\""
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/validate",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "validate"]
        },
        "description": "Valider le token JWT actuel"
      },
      "response": []
    },
    {
      "name": "üë• 4. R√©cup√©rer Tous les Utilisateurs",
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{jwt_token}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/users",
          "host": ["{{baseUrl}}"],
          "path": ["api", "users"]
        },
        "description": "R√©cup√®re la liste de tous les utilisateurs (requiert r√¥le Admin)"
      },
      "response": []
    },
    {
      "name": "üé≠ 5. R√©cup√©rer les R√¥les Disponibles",
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{jwt_token}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/users/roles",
          "host": ["{{baseUrl}}"],
          "path": ["api", "users", "roles"]
        },
        "description": "R√©cup√®re la liste des r√¥les disponibles (Admin, Manager, Employ√©)"
      },
      "response": []
    },
    {
      "name": "üÜï 6. Cr√©er Nouvel Utilisateur",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Sauvegarder l'ID du nouvel utilisateur",
              "if (pm.response.code === 201) {",
              "    const response = pm.response.json();",
              "    pm.collectionVariables.set('created_user_id', response.id);",
              "    pm.test('Utilisateur cr√©√© avec succ√®s', function () {",
              "        pm.expect(response.id).to.exist;",
              "    });",
              "    console.log('üë§ ID utilisateur sauvegard√©: ' + response.id);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{jwt_token}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"username\": \"testuser_postman\",\n  \"email\": \"testuser@postman.com\",\n  \"password\": \"TestUser123*\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"Postman\",\n  \"roles\": [\"Employ√©\"]\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/users",
          "host": ["{{baseUrl}}"],
          "path": ["api", "users"]
        },
        "description": "Cr√©e un nouvel utilisateur avec le r√¥le Employ√©. L'ID sera automatiquement sauvegard√©."
      },
      "response": []
    },
    {
      "name": "üîç 7. R√©cup√©rer Utilisateur par ID",
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{jwt_token}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/users/{{created_user_id}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "users", "{{created_user_id}}"]
        },
        "description": "R√©cup√®re les d√©tails de l'utilisateur cr√©√© pr√©c√©demment"
      },
      "response": []
    },
    {
      "name": "‚úèÔ∏è 8. Modifier Utilisateur",
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{jwt_token}}",
              "type": "string"
            }
          ]
        },
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"firstName\": \"Test Modifi√©\",\n  \"lastName\": \"Postman Updated\",\n  \"isActive\": true,\n  \"roles\": [\"Manager\"]\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/users/{{created_user_id}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "users", "{{created_user_id}}"]
        },
        "description": "Modifie l'utilisateur cr√©√© (changement de nom et promotion au r√¥le Manager)"
      },
      "response": []
    },
    {
      "name": "üîê 9. Test Login Nouvel Utilisateur",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"username\": \"testuser_postman\",\n  \"password\": \"TestUser123*\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/login",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "login"]
        },
        "description": "Test de connexion avec le nouvel utilisateur cr√©√©"
      },
      "response": []
    },
    {
      "name": "üö´ 10. Test Acc√®s Sans Token (Doit √âchouer)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/users",
          "host": ["{{baseUrl}}"],
          "path": ["api", "users"]
        },
        "description": "Test de s√©curit√© : tentative d'acc√®s sans token JWT (doit retourner 401)"
      },
      "response": []
    },
    {
      "name": "üóëÔ∏è 11. Supprimer Utilisateur de Test",
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{jwt_token}}",
              "type": "string"
            }
          ]
        },
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/users/{{created_user_id}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "users", "{{created_user_id}}"]
        },
        "description": "Supprime l'utilisateur de test cr√©√© pr√©c√©demment"
      },
      "response": []
    },
    {
      "name": "‚úÖ 12. V√©rifier Suppression (Doit √âchouer)",
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{jwt_token}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/users/{{created_user_id}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "users", "{{created_user_id}}"]
        },
        "description": "V√©rification que l'utilisateur a bien √©t√© supprim√© (doit retourner 404)"
      },
      "response": []
    }
  ]
} 